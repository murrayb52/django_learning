This file contains notes taken from "Python Django Tutorial For Beginners" which was used
to learn how to build my first website using Django. Tutorial available at:
https://www.youtube.com/watch?v=HRLIEgwYSHc&list=PL9ooVrP1hQOED7UWm5FMv4z4b1L8lxnlb&index=4

Author: Murray Buchanan
Date: 2021-09-03

###########################################################################################
__init__.py:
indicates that a folder conatins exectuable python files.

setttings.py:
is a python module that contains the configurations for the django installation.

urls.py:
Effectively a table consisting of all url declarations of django project. When a user navigates to a particular
URL, this file determines which python code to execute.
Finds first instance of URL and returns requested page.

wsgi.py:
"Web Server Gateway Interface"

To run a server:
>_ python manage.py runserver 
Server changes will be updated by refreshing webpage.

A website is a large domain that contains many web applications. A project can contain
multiple apps and an app can be in multiple projects.

Create an app:
>_ python manage.py startapp TechnicalCourses 

Django uses sqlite3 as default database type and imports the settings for us.

To tell django that changes have been made to the models and that it should store it as a
migration. Migrations are the way django stores cahnges to the models:
	>_ python manage.py makemigrations TechnicalCourses
Then we need to execute a command to take the migration name and return the corresponding SQL:
	>_ python manage.py sqlmigrate [Name of Project] [id for Project migration]
	eg. >_ python manage.py sqlmigrate TechnicalCourses 0001
Table names will be automatically generated by combining the name of the app and the
lowercase name of the model. Theprimary keys are added automatically.
Now we run the migrate again to create the model table in the database.
This takes the migrations that haven't been applied and runs them against the database. This
prevents the need to delete rewrite the tables.

###########################################################################################
ADDING AND RETRIEVING ITEMS FROM THE DATABASE:
###########################################################################################
To add stuff, open terminal, cd into Website directory and run the following to open python shell:
	>_ python manage.py shell
	>_ from TechnicalCourses.models import Allcourses, details
	>_ Allcourses.objects.all() shows that the QuerySet is empty
Add objects with:
	>_ [object_name] = Allcourses(coursename="[course name]",insname="[instructor name]"
	>_ a.save() saves the objects
Retrieve model data with:
	>_ [object_name].coursename OR [object_name].insname
Retrieve model id with .id or .pk (primary key):
	>_ [object_name].id OR [object_name].pk
Running >_ Allcourses.objects.all() shows the QuerySet

When defining a function inside a class, we need to use the (self) parameter:
The below function will return the coursename instead of the object id when calling Allcourses.objects.all()
	def __str__(self): 
Other ways of calling object data:
	[object_name].objects.all()
	[object_name].objects.get(id=[X])
	[object_name].objects.filter(id=[X])

################################
HOW TO WORK WITH ADMIN
###############################
	>_ python manage.py createsuperuser
To make apps modifiable in /admin, we have to import the app into admin.py file
	>_ from .models import Allcourses
	>_ admin.site.register(Allcourses)
Run server. In browser, navigate to [domain]/admin and login with superuser details.
Now we can view, edit and remove any objects of Allcourses class in a GUI format.

A view is a type of webpage in the django application which generally serves a specific
function and uses a specific template


