This file contains notes taken from "Python Django Tutorial For Beginners" which was used
to learn how to build my first website using Django. Tutorial available at:
https://www.youtube.com/watch?v=HRLIEgwYSHc&list=PL9ooVrP1hQOED7UWm5FMv4z4b1L8lxnlb&index=4

Author: Murray Buchanan
Date: 2021-09-03
Ended lesson at 2:10:46 (APIs)
###########################################################################################
__init__.py:
indicates that a folder conatins exectuable python files.

setttings.py:
is a python module that contains the configurations for the django installation.

urls.py:
Effectively a table consisting of all url declarations of django project. When a user navigates to a particular
URL, this file determines which python code to execute.
Finds first instance of URL and returns requested page.

wsgi.py:
"Web Server Gateway Interface"

To run a server:
>_ python manage.py runserver 
Server changes will be updated by refreshing webpage.

A website is a large domain that contains many web applications. A project can contain
multiple apps and an app can be in multiple projects.

Create an app:
>_ python manage.py startapp TechnicalCourses 

Django uses sqlite3 as default database type and imports the settings for us.

To tell django that changes have been made to the models and that it should store it as a
migration. Migrations are the way django stores cahnges to the models:
	>_ python manage.py makemigrations TechnicalCourses
Then we need to execute a command to take the migration name and return the corresponding SQL:
	>_ python manage.py sqlmigrate [Name of Project] [id for Project migration]
	eg. >_ python manage.py sqlmigrate TechnicalCourses 0001
Table names will be automatically generated by combining the name of the app and the
lowercase name of the model. Theprimary keys are added automatically.
Now we run the migrate again to create the model table in the database.
This takes the migrations that haven't been applied and runs them against the database. This
prevents the need to delete rewrite the tables.

###########################################################################################
ADDING AND RETRIEVING ITEMS FROM THE DATABASE:
###########################################################################################
To add stuff, open terminal, cd into Website directory and run the following to open python shell.:
	>_ python manage.py shell
	>_ from TechnicalCourses.models import Allcourses, details
	>_ Allcourses.objects.all() shows that the QuerySet is empty
Add objects with:
	>_ [object_name] = Allcourses(coursename="[course name]",insname="[instructor name]"
	>_ a.save() saves the objects
Retrieve model data with:
	>_ [object_name].coursename OR [object_name].insname
Retrieve model id with .id or .pk (primary key):
	>_ [object_name].id OR [object_name].pk
Running >_ Allcourses.objects.all() shows the QuerySet

When defining a function inside a class, we need to use the (self) parameter:
The below function will return the coursename instead of the object id when calling Allcourses.objects.all()
	def __str__(self): 
Other ways of calling object data:
	[object_name].objects.all()
	[object_name].objects.get(id=[X])
	[object_name].objects.filter(id=[X])
Note:
	get() will return specific object: <Allcourses: Python>
	filter() returns filtered objects INSIDE QuerySet: <QuerySet [<Allcourses: Python>]> 

################################
HOW TO WORK WITH ADMIN
###############################
	>_ python manage.py createsuperuser
To make apps modifiable in /admin, we have to import the app into admin.py file
	>_ from .models import Allcourses
	>_ admin.site.register(Allcourses)
Run server. In browser, navigate to [domain]/admin and login with superuser details.
Now we can view, edit and remove any objects of Allcourses class in a GUI format.

A view is a type of webpage in the django application which generally serves a specific
function and uses a specific template

Use bootsrap to beautify webpages.

Changes to models.py requires us to use the makemigrations and migrate command
By running the makemigrations command, we tell django we've some changes to our models and want them to be stored as a migrations.

The sqlmigrate command takes migrations and names and returns their sql.
Table names are automatically generated by taking the name of the app and the LOWERCASE name of the model class e.g. Allcourses & details becomes allcourses & details

The sql command doesn't automatically run the migration on the database. It just allows us to check what django is going to do.

The migrate takes all migrations that haven't been applied and runs them against the database. It specialises in updating the database live without losing data.

Whenever cahnges are made [to models] we have to use:
	makemigrations
	migrate
	sqlmigrate (with id generated by migrate)

Make changes to models
Store changes to database
Make changes to view.py
Make changes to templates (.html files)
Linked template file to urls.py present within the app

###################################################################
AUTOMATED TESTING
###################################################################
We create automated tests to run multiple different posibilities through an app to check whether it behaves as intended.
These identify and prevent problems in seconds.
Tests are important for when external developers view your code.
Tests also ensure that you don't break colleagues' code and vice versa.

We can write test before we write code (test-driven development). This is kind of like formulating the problem before solving it.

It is advised to write a test with each feature added or bug removed.

assertIs() will check our output with the intended output (which we pass as a parameter

To test a file, run:
	>_ python manage.py test [App name]

By creating a test, even for a simple issue, we can run it over and over again for each new feature that is added to the programme to check that added/updated code does not break our functionality again

We can also create tests for views. Django includes a test client to simulate a user interacting with an application at the view level.

>_ from django.test.utils import setup_test_environment
>_ setup_test_environment()
The setup_test_environment method installs a template rendered that allows us to examine some additonal attributes on responses such as response.context() that otherwise wouldn't be available.
NOTE: This method does not setup a test database.
>_ from django.test import Client
>_ cient=Client()
>_ response=client.get('/')
>_ response=client.get('')
>_ response.status_code
A status code of 200 means that our website is responding well
TO retrieve the content on the website:
>_ response.content

#####################################################################
HTML
#####################################################################
Block tags needed:
<html>
<head>: hosts metainformation such as page title and char set
<body>: encloses all contents that appear on the page
Inline tags:
<title>
<hX> where 1<=h<=6 are the levels of importance of each heading
<p>: no limit to the number of p-tags taht we can add
<a href="site">: text links
	target="_blank": opens in new tab by default
<img src="image_location">: for images
	alt="Alternate text": in case image isn't loaded
	style="width:640px,height:540px": image size
<button>: creates html button. All text inside tags appears on the button. We can also add an element or image inside a button.
Lists: there are 3 kinds of lists. All lists require at least one element.
	<ul>: unordered list
	<ol>: ordered list
	<odl>: arranges items in the same was as in a dictionary
<table>:
	<tr>: define table rows
	<th>: define table headers
	<td>: define table cells  

Formatting:
<center>: centers element
<font color="colour">: changes text colour

###########################################################
DO's AND DON'TS
###########################################################
In Django template code put one (and only one) space between curly braces and the tag contents:
	Do: 	{{ foo }}
	Don't:	{{foo}}

Field names should be all lower case, using underscores. Not camelCase:
	Do:
		class Person(models.Model)
			first_name = models.CharField(max_length=20)
	Don't:
		class Person(models.Model)
			FirstName = models.CharField(max_length=20)

The order to use models within classes is:
	1) all database fields
	2) custom manager attirubtes
	3) class method
	4) string method
	5) save method
	6) get absolute url method
	7) any other custom methods that are left over

####################################################################
FAQ
####################################################################
Django uses a shared-nothing architecture which means you can add hardware at any level - database serves, caching servers or Web/application servers.

To mkae changes to models and the database:
	Change your models (in models.py)
	>_ python manage.py makemigrations
	>_ python manage.py migrate

The reason these are separate is because we can commit migratations to our version control system and ship them with the app.

NoSQL databases are not officially supported by Django itself.

Customising the functionality of a Django admin:
	We can attach arbitrary JavaScript modules to the page via the model's class Admin js parameter. That parameter is a list of URLs, as stings, pointing to JavaScript modules that will be included within the admin form via a <script> tag.

#####################################################################
API integration
####################################################################